;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; toKernel - Universal PHP Framework          ;
; HTTP Intercase configuration examples       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; toKernel HTTP mode can contain more than one interfaces.
; Interface - meaning a HTTP request/response functionality with own configuration.
;
; In this file, for instance, you can have different interfaces like:
;
; "backend" - Website backend aka Administration area with special rules.
;   http://example.com/backend
;   http://backend.example.com
;
; "administration" - This interface inherites all configuration values from "backend" interface.
;   In other words, to have different interfaces with exact same configucration values you can just inherit some of them.
;   http://example.com/administration
;   http://administration.example.com
;
; "api" - RESTful API interface. This example contains also sub-interfaces "/v1", "/v2".
;   http://example.com/api
;   http://example.com/api/v1
;   http://example.com/api/v2
;   http://api.example.com/v1
;   http://api.example.com/v2
;
; "customers" - interface with special configuration.
;   http://example.com/customers
;   http://customers.example.com
;
; In examples above, you can see, that an interface can be defined also as a subdomain. But it should in enabled in section.
; For an interface configuration, see first item "tokernel_default" section with items described in.
; If some of the configuration value not specified in custom interface, a value will be used from "tokernel_default" section.
;
;-----------------------------------------------------
;
; System default HTTP interface.
; If no need to run more than one interfaces, this one can accept as any.
;
; NOTICE: If you have more than one interfaces defined, this one will run and accept for website frontend requests.
; i.e. http://example.com
;
[tokernel_default]

enabled=1
; The URL pattern.
; In this default we not using any.
pattern=

; In case, if you want to have different interfaces with same configuration values,
; you can just inherit from one of interface and define some of your own configuration values.
; See example bellow "administration" interface
inherited=

; @todo check name
under_maintenance=0

; Clean URL on initialization.
auto_clean_url=1

; Clean GLOBALS on initialization.
auto_clean_globals=1

; Clean GLOBALS for XSS on initialization.
auto_clean_globals_xss=0

; Enable to check Allowed IP addresses
ip_check_allowed=0

; Allowed IP Addresses separated by comma.
ip_allowed=192.168.0.10,192.168.0.11

; Enable to check Blovked IP addresses
ip_check_blocked=0

; Blocked IP Addresses separated by comma.
ip_blocked=192.168.0.5,192.168.0.6

; Interface base URL (optional).
; In case, if your application located in sub-directory of web document root,
; it is recommended to set base url of your application.
; Examples:
; http://localhost/my_project/
; http://www.example.com/blog/
base_url=

; Allow dashes in url
; If dashes is allowed, the url can contain segments like:
; /addon-name-with-dashes/and-action-name/param-1/param-2
;
; However in URL request initialization dashes in segments for addon and action names
; will be converted to underscores for proper functionality:
; addon: addon_name_with_dashes
; action: and_action_name
; params: param-1, param-2
;
; Notice: URL parameters other than addon and action will be parsed as is.
;         (No convertion from dashes to underscores).
; Notice: in routes configuration dashes is allowed by default.
;         You can define routes with dashes which will be parsed automatically.
allow_url_dashes=1

; Parse language prefix from url.
; If you planning to develop multilanguage web application, and want to be able
; to define page language from URL, this flag should be defined as "1".
; For example, http://www.example.com/en will be parsed as English language by "en" prefix.
parse_language=1

; It is possible to detect browser language and initialize, if:
; Browser language matches with allowed languages (see bellow).
; Visited to web page without language prefix.
catch_browser_language=1

; Default language.
default_language=en

; Allowed languages.
allowed_languages=en|ru|hy

; Run hooks.
allow_http_hooks=1

; Default addon and action for interface.
; In MVC words, this is default controller and method (index).
default_callable_addon=example
default_callable_action=index

; WEB Interface theme name.
; In toKernel framework, each interface can have own them for WEB interface.
; In case, if you configuring RESTful API interface, you can leave this value as empty.
;
; This is theme directory name located in: /application/themes/
web_theme=default

; PHP's built-in default is text/html
; http://php.net/default-mimetype
default_mimetype=text/html

; PHP's default character set is set to empty.
; http://php.net/default-charset
default_charset=UTF-8

; Default timestamp format.
timestampformat=Y-m-d H:i:s

; Default date format.
dateformat=Y-m-d

; Default time format.
timeformat=H:i:s

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Possible examples of inteface detection configuration.   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTICE! "www" value in pattern is sensitive.
; If your interface can accept also www, you should define it too.
; In other words, www.example.com and example.com looks like different resources.
; If you want to accept interface with and without www than you have to write *.example.com
; But with this approach, please care about subdomains, they should be defined before this.
; Imagine, that the www.example.com and example.com are diffferent addresses and the www looks like subdomain.
; This is because SEO engines always checks if your web resource starts with www.


; Some of real live examples.

; Backend path
; example.com/backend
; example.com/backend/any/path
[/backend]
enabled=1
pattern=*/backend*

; Backend path alias
; example.com/administration
; example.com/administration/any/path
[/administration]
inherited=/backend
enabled=1
pattern=*/administration*

; API Version 1 path
; example.com/api/v1
; example.com/api/v1/any/path
[api/v1]
enabled=1
pattern=*/api/v1*

; API Version 2 path
; example.com/api/v2
; example.com/api/v2/any/path
[api/v2]
enabled=1
pattern=*/api/v2*

; API Version 1 with subdomain and path
; api.example.com/v1
; api.example.com/v1/any/path
[api.*/v1]
enabled=1
pattern=api.*/v1*

; API Version 2 with subdomain and path
; api.example.com/v2
; api.example.com/v2/any/path
[api.*/v2]
enabled=1
pattern=api.*/v2*

; Actual Domain
; example.com
; example.com/any/path
[example.com]
enabled=1
pattern=example.com*
default_language=en

; Actual Domain
; example.ru
; example.ru/any/path
[example.ru]
enabled=1
pattern=example.ru*
default_language=ru

; Other possible examples.

; actual domain
; http://example.com
; http://example.com/
; http://example.com/any/path
[example.com]
enabled=1
pattern=example.com*

; actual domain starting with www
; http://www.example.com
; http://www.example.com/
; http://www.example.com/any/path
[www.example.com]
inherited=example.com
enabled=1
pattern=www.example.com*

; actual domain (This domain will not accept www.*)
; example.ru
; example.ru/
; example.ru/any/path
[example.ru]
enabled=1
pattern=example.ru*

; actual domain (Accepts with www.* but if you want also add interface with sub-domain, than, sub-domains should be defined before).
; example.de
; example.de/
; example.de/any/path
; www.example.de
; www.example.de/
; www.example.de/any/path
[*example.de]
enabled=1
pattern=*.example.de/*

; actual domain (This domain will not accept www.*)
; example.co.uk
; example.co.uk/
; example.co.uk/any/path
[example.co.uk]
enabled=1
pattern=example.co.uk/*

; actual localhost
; localhost
; localhost/
; localhost/any/path
[localhost]
enabled=1
pattern=localhost/*

; actual domain with subdomain
; portal.example.com
; portal.example.com/
; portal.example.com/any/path
[portal.example.com]
enabled=1
pattern=portal.example.com/*

; actual domain with path
; example.com/news
[example.com/news]
enabled=1
pattern=example.com/news*

; actual domain with deep path
; example.com/news/latest
[example.com/news/latest]
enabled=1
pattern=example.com/news/latest*

; subdomain without path
; portal.example.com
; portal.example.ru
; portal.example.com/any/path
[portal.*]
enabled=1
pattern=portal.*

; subdomain with domain and wildcard end (this can be also sub-domain.sub-domain.domain) see bellow.
; portal.example.com
; portal.example.com/any/path
; portal.example.co.uk
; portal.example.co.uk/any/path
; portal.example.live.com
; portal.example.live.com/any/path
[portal.example.*]
enabled=1
pattern=portal.example.*

; actual domain with wildcard subdomain
; www.example.com
; portal.example.com
; portal.example.com/
; portal.example.com/any/path
; live.example.com
[*.example.com]
enabled=1
pattern=*.example.com*

; domain with wildcard subdomain and wildcard end
; www.example.com
; portal.example.com
; portal.example.ru
; portal.example.com/any/path
; live.example.com
; live.example.ru
; live.example.ru/any/path
[*.example.*]
enabled=1
pattern=*.example.*

; actual domain with wildcard subdomain and path
; www.example.com/news
; portal.example.com/news
; portal.example.com/news/any/path
; live.example.com/news/
; live.example.com/news/any/path
[*.example.com/news]
enabled=1
pattern=*.example.com/news*

; actual domain with wildcard subdomain and deep path
; www.example.com/news/latest
; portal.example.com/news/latest
; portal.example.com/news/latest/any/path
; live.example.com/news/latest/
; live.example.com/news/latest/any/path
[*.example.com/news/latest]
enabled=1
pattern=*.example.com/news/latest*

; domain with wildcard subdomain and wildcard end and deep path
; www.example.com/news/latest
; portal.example.com/news/latest
; portal.example.com/news/latest/any/path
; portal.example.ru/news/latest
; portal.example.ru/news/latest/any/path
; live.example.com/news/latest
; live.example.com/news/latest/any/path
; live.example.ru/news/latest
; live.example.ru/news/latest/any/path
; portal.example.co.uk/news/latest
; portal.example.co.uk/news/latest/any/path
; live.portal.example.co.uk/news/latest
; live.portal.example.co.uk/news/latest/any/path
[*.example.*/news/latest]
enabled=1
pattern=*.example.*/news/latest*

; domain with wildcard subdomain and wildcard end and path
; www.example.com/news
; portal.example.com/news
; portal.example.com/news/any/path
; portal.example.ru/news
; portal.example.ru/news/any/path
; live.example.com/news
; live.example.com/news/any/path
; live.example.ru/news
; live.example.ru/news/any/path
; portal.example.co.uk/news
; portal.example.co.uk/news/any/path
; live.portal.example.co.uk/news
; live.portal.example.co.uk/news/any/path
[*.example.*/news]
enabled=1
pattern=*.example.*/news*

; actual deep path with any domain or subdomain
; example.com/news/latest
; example.com/news/latest/any/path
; www.example.com/news/latest
; www.example.com/news/latest/any/path
; portal.example.com/news/latest
; portal.example.com/news/latest/any/path
; live.portal.example.com/news/latest
; live.portal.example.com/news/latest/any/path
; example.ru/news/latest
; example.ru/news/latest/any/path
; www.example.ru/news/latest
; www.example.ru/news/latest/any/path
; portal.example.ru/news/latest
; portal.example.ru/news/latest/any/path
; live.portal.example.ru/news/latest
; live.portal.example.ru/news/latest/any/path
[/news/latest]
enabled=1
pattern=*/news/latest*

; actual path with any domain or subdomain
; example.com/news
; example.com/news/any/path
; www.example.com/news
; www.example.com/news/any/path
; portal.example.com/news
; portal.example.com/news/any/path
; live.portal.example.com/news
; live.portal.example.com/news/any/path
; example.ru/news
; example.ru/news/any/path
; www.example.ru/news
; www.example.ru/news/any/path
; portal.example.ru/news
; portal.example.ru/news/any/path
; live.portal.example.ru/news
; live.portal.example.ru/news/any/path
[/news]
enabled=1
pattern=*/news*

; subdomain with wildcard domain and path
; portal.example.com/news
; portal.example.com/news/any/path
; portal.live.example.com/news
; portal.live.example.com/news/any/path
; portal.example.ru/news
; portal.example.ru/news/any/path
; portal.live.example.ru/news
; portal.live.example.ru/news/any/path
[portal.*/news]
enabled=1
pattern=portal.*/news*

; subdomain with wildcard domain and deep path
; portal.example.com/news/latest
; portal.example.com/news/latest/any/path
; portal.live.example.com/news/latest
; portal.live.example.com/news/latest/any/path
; portal.example.ru/news/latest
; portal.example.ru/news/latest/any/path
; portal.live.example.ru/news/latest
; portal.live.example.ru/news/latest/any/path
[portal.*/news/latest]
enabled=1
pattern=portal.*/news/latest*

; sub-domain.sub-domain with any domain and path
; portal.live.com/news
; portal.live.com/news/any/path
; portal.live.example.com/news
; portal.live.example.com/news/any/path
; portal.live.ru/news
; portal.live.ru/news/any/path
; portal.live.example.ru/news
; portal.live.example.ru/news/any/path
[portal.live.*/news]
enabled=1
pattern=portal.live.*/news*

; sub-domain.sub-domain with any domain and deep path
; portal.live.com/news/latest
; portal.live.com/news/latest/any/path
; portal.live.example.com/news/latest
; portal.live.example.com/news/latest/any/path
; portal.live.ru/news/latest
; portal.live.ru/news/latest/any/path
; portal.live.example.ru/news/latest
; portal.live.example.ru/news/latest/any/path
[portal.live.*/news/latest]
enabled=1
pattern=portal.live.*/news/latest*

; End of file. Last update: 05-05-2017