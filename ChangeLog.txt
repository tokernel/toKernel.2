
 toKernel - Universal PHP Framework - CHANGELOG
 ==============================================

 Version 2.3.0 - 12/04/2017
 --------------------------

 Hello and welcome to next (Light & fast) release of toKernel !

 Unlike many operating systems and applications, in development evolution
 our project getting to run more faster and faster.

 The main changes we have in this release is:

    - Simple installation guide with database included.
    - New example addon(s)
    - Some of parts removed to run the application more faster.

 -------------------------------------------------------------------------------------
 NOTICE: The toKernel v.2.x now requires PHP 5.6 version at least,
          because it is only one in 5's family which supports now.

 Functionality removed from framework directory

    1. Templates removed from framework directory.
        Now the templates functionality provides only with /application/templates/.

    2. Languages removed from framework directory.
        Now the language files provided only with /application/languages/

    3. Addons removed from framework directory.
        Now the addons functionality provided only in /application/addons/

    Directories removed: /tokernel.framework/templates
                         /tokernel.framework/languages
                         /tokernel.framework/addons

 [Installation]

 Installation guide with MySQL Sample database - Version 1.0.0

    With this guide, you can setup toKernel Framework and start you development.

        Just follow the steps and you'll be ready to go!
            - Setup Application in Web directory
            - Configure web access
            - Setup MySQL Database
            - Start test and enjoy!

    Files: /install/Install.txt

 [Addons]

 Addon "test" removed

    Instead we included addon "example".
    See next:

    Files: /application/addons/test

 Addon "example" included - Version 1.0.0

    Addon "example" included to introduce some main concepts of toKernel framework functionality.

    In this addon you can look & feel the functionality of:
        - Addon action types.
        - Functionality in CLI (Command line interface)
        - Modules
        - Templates, Views, Widgets
        - Work with MySQL database (class library).
        And other...

    Files: /application/addons/example
           /application/templates/frontend/example*.tpl.php

 [Kernel]

 Kernel's application core class - Version 1.1.2

    1. Loading only language file from application/languages,
        because the languages directory no longer available in framework.

    File: tokernel.framework/kernel/app.core.class.php

 Kernel's application http class - Version 1.5.2

     1. Fixed the cache loading.

     2. In the HTTP headers: sending HTTP 1.1 instead of HTTP 1.0

     3. Argument of method language() required.
        If you want to get detected language of application, just call:
        $this->lib->url->language_prefix();

     File: tokernel.framework/kernel/app.http.class.php

 Kernel's application cli class - Version 1.2.1

    1. Argument of method language() required.
       If you want to get detected language of application, just call:
       $this->lib->cli->language_prefix();

    2. Removed method set_language() because of some language restrictions in CLI mode of toKernel 2.x

	3. Method allowed_languages() returns only English.
		array(
			'en' => 'English'
		)


	File: tokernel.framework/kernel/app.cli.class.php

 Kernel's tk_e (error and exception handler) class - Version 2.0.1

    1. In the HTTP headers: sending HTTP 1.1 instead of HTTP 1.0

	2. Before displaying error message, clean all levels of output buffering.

    File: tokernel.framework/kernel/e.http.class.php

 Kernel's library loader class - Version 2.0.0

     1. Extending Class libraries in application requires .ext.lib.php prefix.
        When extending class libraries in application it is now requires to
        create file as /application/lib/{my_library_name}.ext.lib.php
        instead of /application/lib/{my_library_name}.lib.php
        And the class name should look like this:
        class {my_library_name}_ext_lib extends {my_library_name}_lib {}

     File: /tokernel.framework/kernel/lib.class.php

 Kernel's Addons loader class library - Version 2.0.0

    1. Now it is only possible to load addons from /application/addons/ directory.
        Loading addons from framework directory is no available.

    2. Extended addons and modules development functionality removed.

        In the /application/addons/{my_addon}/lib/ and /application/addons/{my_addon}/modules/
        the extended addons and modules development removed because, now we have base
        addons and modules development in /application/base.

        This was old feature which no longer used now.

    3. Method all() returns only addon names located in application.
        Because addons is no longer available in framework, the method returns addons only from
        application and the optional variable $tk_only removed.

    4. Method exists() returning only addon path from application only.
        Because addons is no longer available in framework, the method returns addon
        path from application only.

    5. Method module_exists() returns module file path from application only.
        Because addons is no longer available in framework, the method returns module
        path from application only.

    6. Method model_exists() returns model file path from application only.
        Because addons is no longer available in framework, the method returns model
        path from application only.

    7. Method view_exists() returns view file path from application only.
        Because addons is no longer available in framework, the method returns view
        path from application only.

    8. Method load_config() loads only configuration file from application addon path.

    9. Methods load() (load addon), load_view(), load_module()
        loads language files only from application's addon path,
        because the addons no longer available in framework.

    File: tokernel.framework/kernel/addons.class.php

 Kernel's base addon class - Version 5.0.0

    1. Method url() return addon url for application only.
        Because addons no longer available in framework, addon url() method returns
        addon url only from application path.

        example: http://localhost/my_project/application/my_addon/

    2. Methods app_url() and tk_url() marked as deprecated and will return the result of url() method.

    3. Method path() returns addon path from application only.
        Because addons no longer available in framework, addon path() method returns
        addon path only from application.

        example: /{path_to_project_root}/application/addons/my_addon/

    4. Methods app_path() and tk_path() marked as deprecated and will return the result of path() method.

    5. Method loaded_from_app_path() marked as deprecated and always returns true.

	6. Argument of method language() required.
		To get language prefix call:
        // HTTP mode
        $this->lib->url->language_prefix();
        // CLI mode
        $this->lib->cli->language_prefix(); // This will always return 'en'.

    File: tokernel.framework/base/addon.class.php

 Kernel's base module class - Version 3.1.1

    1. Argument of method language() required.
		To get language prefix call:
        // HTTP mode
        $this->lib->url->language_prefix();
        // CLI mode
        $this->lib->cli->language_prefix(); // This will always return 'en'.

    File: tokernel.framework/base/module.class.php

 Kernel's base view class - Version 2.1.2

     1. Trigger notice if the variable in __get() not exists to return.
        Return NULL instead of false.

     2. In the run() method, the values able to parse from {var.val_name} to variables like: $this->value.

         Example:

             --------
             In method where the view object used:

             $this->load_view('my_view');

             $data = array(
                 'name' => 'My name',
                 'age'  => 'My age X'
             );

             $view->show($data); // aka $buffer = $view->run($data);

             --------
             In the view file the both options is able to display or get values.

             <h1>Something here!</h1>
             <p>Name: <?php echo $this->name; ?></p>
             <p>Age: {var.age}</p>

             ------

             See actual examples in files:
             File: /application/addons/example/lib/example.addon.php
             Line: 320

             File: application/addons/example/views/simple_with_params.view.php
             Line: 5

     3. Argument of method language() required.
     	To get language prefix call:
        $this->lib->url->language_prefix();

     File: /tokernel.framework/base/view.class.php

 - Libraries

 Language class library - Version 3.0.0

    1. This is the new generation of language class library.
       The main goal of refactoring is fast and flexible usage.

    2. The language content will not be loaded in instance until first item request.

    File: /tokernel.framework/lib/language.lib.php

 Pagination class library - Version 2.1.0

     1. New dynamic way to define base url.

         This is the rid of very big head pain for many developers.

         Old style base url:
           $base_url = 'http://localhost/my_project/addon/action/param1/param2/param3/';
           // The pagination library will add a page number to end of url:
           // http://localhost/my_project/addon/action/param1/param2/param3/1

         New option to develop:
           $base_url = 'http://localhost/my_project/addon/action/{var.offset}/param1/param2/param3/';
           // The pagination library will replace the {var.offset} in string with page number.
           // http://localhost/my_project/addon/action/1/param1/param2/param3/
           // http://localhost/my_project/addon/action/2/param1/param2/param3/
           // So, it is possible to add in any part of string.

         Notice: if the item {var.offset} in base url not exists,
         a page number will be added to the end of url like before.

     File: /tokernel.framework/lib/pagination.lib.php

 Validation (valid) class library - Version 1.4.0

     1. New method date() added.
         You can validate a date with your given format.

     2. In all methods excepts password_strength() and credit_card()
         if the validation passed, than 'true' will be returned instead ov actual data value.

     3. Method az_09() is deprecated. Instead you can use method alpha_numeric().

     File: tokernel.framework/lib/valid.lib.php

 Shopping cart class library - Version 1.0.2

    1. Some of class members changed to protected instead of old private.

    File: tokernel.framework/lib/shopping_cart.lib.php

 INI class library - Version 1.3.1

    1. Small fixes

    File: tokernel.framework/lib/ini.lib.php

 Form validation class library - Version 2.0.0

     The new generation of form validation class library available now with new rules and features.

     1. New rules added to validate:
		It is also possible to accept multiple values for validation.


     2. It is now possible to set custom messages to rules.

         Example:

         $rules = array(
             'car_model' => array(
                 'required' => true
             ),
             'device_model' => array(
                 'required' => true
             ),
         );

         $messages = array(
             'car_model' => array(
                 'required' => 'Please enter the model of your car!'
             )
         );

         // As you can see, the "car_model" have custom created message,
         // when the "device_model" will display default message from application language.

         $this->lib->form_validation->add_rules($rules, $messages);

     3. "required" rule should be defined for any required element.

         If the element value is required, the "required" rule should be defined.
         For example, you have a rule listed bellow and the value is empty,
         the validation will be passed as true:

         $rules = array(
             'email_address' => array(
                 'email' => true
             )
         );

         Instead, you have to add "required" rule too:

         $rules = array(
             'email_address' => array(
                 'email' => true,
                 'required' => true
             )
         );

         Because in practice we having a case when the value should be validated only if not empty.

     4. Define a new instance of form_validation library.

         It is now possible to define many instances of library with different rules.

         $rules_1 = array(...);
         $rules_2 = array(...);

         $fv_1 = $this->lib->form_validation->instance($rules_1);
         $fv_2 = $this->lib->form_validation->instance($rules_2);

         // So now, the $fv_2 and $fv_2 are different instances with different rules.

	 5. It is possible to validate any type of data instead of POST request only.

	    Example:

	    // Validate POST request data by default
	    $this->lib->form_validation->run();

	    // Validate PUT request data (this option works for REST API Development)
	    $this->lib->form_validation->run('PUT');

	    // Validate custom created array
	    $this->lib->form_validation->run($my_array);

     File: /tokernel.framework/lib/form_validation.lib.php

 Date class library - Version 2.0.0

     1. The methods in this library was successfully refactored.

     File: /tokernel.framework/lib/date.lib.php

 Array class library - Version 1.1.0

     1. New method key_by_pos() in library.
         Returns key from array by position.

     2. Method array_key_rename() is deprecated.
         Instead you can use key_rename() method.

     3. Method array_key_pos() is deprecated.
         Instead you can use key_pos() method.

     File: /tokernel.framework/lib/array.lib.php

 URL Class library - Version 4.1.0

     1. Dashes allowed in URLs
        New item added into application.ini file:
            http_allow_url_dashes=1

        With this option it will be possible to parse urls with dash
        and convert addon/action names to underscores for proper functionality.

        Example: http://localhost/my_project/addon-name-with-dashes/and-action-name/param-1/param-2
        Will parse as:
            addon: addon_name_with_dashes
            action: and_action_name
            params: param-1, param-2

        As you can see, the parameters parses as is.

        Notice: in routes configuration dashes is allowed by default.

 CLI (Command line interface) class library - Version 2.0.1

    1. Small bugs fixed.

    2. In toKernel 2.x method out() displays content with new line character.
        If you want to ignore new line, just set last argument to false.
        $this->lib->cli->out('my text', 'red', 'white', false);

	3. toKernel 2.x supports only English language in CLI and the method language_prefix() will always return 'en'.

	File: tokernel.framework/lib/cli.lib.php

 Template parsing class library - Version 3.0.0

    1. Because the templates directory and functionality removed from framework directory,
        all template files loading only from application/templates directory.

	3. If the required template file not exists in instance() method, the WARNING will be triggered.

	File: tokernel.framework/lib/template.lib.php

 Extended "shopping_cart" class library in application.

       This is an example to demonstrate you, how to extend class libraries.
       See usage:
           File: /application/addons/example/lib/example.addon.php

       File: application/lib/shopping_cart.ext.lib.php

 - Misc

 Application hooks - Version 2.0.0

	1. Now the application has only one hook file class library where you can add all your actions.

		Each action allows you to write actions in specific situation:
			before_run()
			after_run()
			cli_before_run()
			cli_after_run()
			http_before_run()
			http_after_run()
			http_before_output($output_buffer)
			http_after_output($output_buffer)

    2. You're able to manage application output buffer in HTTP mode with your own risk in method http_before_output()

	3. Hook class libraries including in kernel loader class instead of application's run() method.

    Files:  /tokernel.framework/tokernel.inc.php
            /tokernel.framework/kernel/app.http.class.php
			/tokernel.framework/kernel/app.cli.class.php
			/tokernel.framework/kernel/hooks_base.class.php
			/application/hooks/hooks.class.php


 End of file
